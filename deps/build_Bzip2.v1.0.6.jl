using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libbz2"], :libbzip2),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaPackaging/Yggdrasil/releases/download/Bzip2-v1.0.6-2"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/Bzip2.v1.0.6.aarch64-linux-gnu.tar.gz", "25bc0b491642b82f68ec2df378133ff60f18d7939f8582cce865a642cb8f9293"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/Bzip2.v1.0.6.aarch64-linux-musl.tar.gz", "afa0d86cf453da55195502902729d33ce8f6fffda42e2bb78811d311f84af5d2"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/Bzip2.v1.0.6.arm-linux-gnueabihf.tar.gz", "e82a8ca2f3bb517c5e81d260ca97cfae3bfc36f4effdb06ecd9372c87f6f702d"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/Bzip2.v1.0.6.arm-linux-musleabihf.tar.gz", "debcc2ae8d0baea30d49e3f1edf981d3d3324e0dc154cf0a6fda6406c4d64325"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/Bzip2.v1.0.6.i686-linux-gnu.tar.gz", "7b84f15213f476a0b6d6bd829c957bd50bd6d6e5d67d19ddbeacd0293ad4c15d"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/Bzip2.v1.0.6.i686-linux-musl.tar.gz", "dbbd0d01d83ac5a75947a9a7c3b6f46c006977f45a4ba2e3a3c80041bd9ddf96"),
    Windows(:i686) => ("$bin_prefix/Bzip2.v1.0.6.i686-w64-mingw32.tar.gz", "faca5ff5a980aac76869d96c2cc0ee765ceb9452026e853de46f59c18c4d0664"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/Bzip2.v1.0.6.powerpc64le-linux-gnu.tar.gz", "0e41e6ab5370b3cc18c698a13cad2d418f9d9d8141404a33c5535adc6e05a446"),
    MacOS(:x86_64) => ("$bin_prefix/Bzip2.v1.0.6.x86_64-apple-darwin14.tar.gz", "2fb0cdf3fc556c0f143b529037816e768ec1cfb80f383659aa4207a5e7a8e6a7"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/Bzip2.v1.0.6.x86_64-linux-gnu.tar.gz", "b083b72bbfd46eb47d7ad672b5b24aba10a75144c8875ae89ecf73e74a18bd85"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/Bzip2.v1.0.6.x86_64-linux-musl.tar.gz", "724e6af0a8eaa1e014551a6c334f9a98a3156c315f276ef4b1f9751c99341c98"),
    FreeBSD(:x86_64) => ("$bin_prefix/Bzip2.v1.0.6.x86_64-unknown-freebsd11.1.tar.gz", "02c65d713004fbd915be4591fe61bcbef95f4c7f776fe6ddc12b6de075033ddb"),
    Windows(:x86_64) => ("$bin_prefix/Bzip2.v1.0.6.x86_64-w64-mingw32.tar.gz", "597c5b9eb1da222c8a4c4154859bab8e930e05789e42b489067692cd6abced9a"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
