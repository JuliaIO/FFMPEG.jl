using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    ExecutableProduct(prefix, "ffmpeg", :ffmpeg),
    ExecutableProduct(prefix, "ffprobe", :ffprobe),
    ExecutableProduct(prefix, "x264", :x264),
    ExecutableProduct(prefix, "x265", :x265),
    LibraryProduct(prefix, ["libavformat"], :libavformat),
    LibraryProduct(prefix, ["libavcodec"], :libavcodec),
    LibraryProduct(prefix, ["libavutil"], :libavutil),
    LibraryProduct(prefix, ["libpostproc"], :libpostproc),
    LibraryProduct(prefix, ["libswresample"], :libswresample),
    LibraryProduct(prefix, ["libavdevice"], :libavdevice),
    LibraryProduct(prefix, ["libavresample"], :libavresample),
    LibraryProduct(prefix, ["libavfilter"], :libavfilter),
    LibraryProduct(prefix, ["libswscale"], :libswscale),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaIO/FFMPEGBuilder/releases/download/v4.1.1"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/FFMPEG.v4.1.0.aarch64-linux-gnu.tar.gz", "d79f049f2321bcfcc3ef18e81ead5af113a918c0030367eb6968fcbf867ca412"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/FFMPEG.v4.1.0.aarch64-linux-musl.tar.gz", "a8e28f714b03ec622348e156498629e06eb9f1f7e0cbd5da5121490ac62779b7"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/FFMPEG.v4.1.0.arm-linux-gnueabihf.tar.gz", "72f93b1b33e5c9fd1fc3738dc2f8003eb6d5b277d101a77fecc497995b96adb5"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/FFMPEG.v4.1.0.arm-linux-musleabihf.tar.gz", "97cbec509990406ca0b32381e7fce81e4e01ca86088cf0b2714775b70a5c60f1"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/FFMPEG.v4.1.0.i686-linux-gnu.tar.gz", "f34bb8381a4adcfd73d7149c51975c782a625c498f076c54aa7e29a3dee00c3a"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/FFMPEG.v4.1.0.i686-linux-musl.tar.gz", "0085e1074209722b3005e222154d757f2479908c6312258177117dda26d8eec0"),
    Windows(:i686) => ("$bin_prefix/FFMPEG.v4.1.0.i686-w64-mingw32.tar.gz", "f09aaaef09519b9354fe4f26a12cb32f894bc8ff0e5d43262ed851d2221c8ec0"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/FFMPEG.v4.1.0.powerpc64le-linux-gnu.tar.gz", "ea85552c6ffed2371df0470b0e3fead9ae879136437c1e98f3129c8b53c2d2b9"),
    MacOS(:x86_64) => ("$bin_prefix/FFMPEG.v4.1.0.x86_64-apple-darwin14.tar.gz", "91560220b65e2710cb82880e7b429d9c0140eac8b83327a9d55ff7d944a3a77d"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/FFMPEG.v4.1.0.x86_64-linux-gnu.tar.gz", "90633107f59151403c3a0f7963c12f9159d2a2caf51c4a2ef2d3325951ddd4f0"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/FFMPEG.v4.1.0.x86_64-linux-musl.tar.gz", "a1ed2411ff4315f80e88da40a8d34a70ff491962bfc38499295191cee727b7ad"),
    FreeBSD(:x86_64) => ("$bin_prefix/FFMPEG.v4.1.0.x86_64-unknown-freebsd11.1.tar.gz", "aed7542c0146382c58f3d6b4afa3c909b61a1925a8eff076a53dde5d547d6dc8"),
    Windows(:x86_64) => ("$bin_prefix/FFMPEG.v4.1.0.x86_64-w64-mingw32.tar.gz", "1a9dbdab5181d4ff930d8c1aafac02be834834e2b5bf28314f607ee3b2a0caef"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
