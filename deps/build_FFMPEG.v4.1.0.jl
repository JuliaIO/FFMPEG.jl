using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    ExecutableProduct(prefix, "ffmpeg", :ffmpeg),
    ExecutableProduct(prefix, "ffprobe", :ffprobe),
    LibraryProduct(prefix, ["libavcodec", "avcodec"], :libavcodec),
    LibraryProduct(prefix, ["libavdevice", "avdevice"], :libavdevice),
    LibraryProduct(prefix, ["libavfilter", "avfilter"], :libavfilter),
    LibraryProduct(prefix, ["libavformat", "avformat"], :libavformat),
    LibraryProduct(prefix, ["libavresample", "swresample"], :libavresample),
    LibraryProduct(prefix, ["libavutil", "avutil"], :libavutil),
    LibraryProduct(prefix, ["libpostproc", "postproc"], :libpostproc),
    LibraryProduct(prefix, ["libswresample", "swresample"], :libswresample),
    LibraryProduct(prefix, ["libswscale", "swscale"], :libswscale),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/FFMPEG_jll.jl/releases/download/FFMPEG-v4.1.0+0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/FFMPEG.v4.1.0.aarch64-linux-gnu.tar.gz", "f6369a90407935a4a40dd57f0b3199abb9f87add30f677fd773ef1174b2920c1"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/FFMPEG.v4.1.0.aarch64-linux-musl.tar.gz", "f3a61f3616f3422df4837d3281b55b778f1e70c2c4b1d027ac638797f2534360"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/FFMPEG.v4.1.0.arm-linux-gnueabihf.tar.gz", "c267907dbb49713cce8e2491f2bc497814f58805dc2457a996ddf400f9b9878f"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/FFMPEG.v4.1.0.arm-linux-musleabihf.tar.gz", "6af68860d1a5e9648aa23c118c3a9bea3302735c6bb230c0b30a6f89a3730833"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/FFMPEG.v4.1.0.i686-linux-gnu.tar.gz", "3205e03fe9ee4db080db79bd2d97b094572fa147adf059b2eb085517fd728dee"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/FFMPEG.v4.1.0.i686-linux-musl.tar.gz", "86f7143559d148d554d7fead5cad6214106e0c27f62aaa7eef74188491e568be"),
    Windows(:i686) => ("$bin_prefix/FFMPEG.v4.1.0.i686-w64-mingw32.tar.gz", "fe01016fe74faf98cd4d80485b7d4f2fdc4f35d26e7f4517917ce229f50778b5"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/FFMPEG.v4.1.0.powerpc64le-linux-gnu.tar.gz", "fd85f71d179f0920f47ec2b609c8581351e21a4aac4cfd60400b1ab58568321a"),
    MacOS(:x86_64) => ("$bin_prefix/FFMPEG.v4.1.0.x86_64-apple-darwin14.tar.gz", "3fcc259dd4266b30945f3197ae599de9d6988be049bb0384cf2a12033d18c0c7"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/FFMPEG.v4.1.0.x86_64-linux-gnu.tar.gz", "b2ed8ae088b2df24cee80561faf3fdda0f97314a0048c87e3856a77dfa7ca07d"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/FFMPEG.v4.1.0.x86_64-linux-musl.tar.gz", "6cf008e866d82c4b18aed72a53eda87f87c7c9d26dc89f283ce0ca9838f54c41"),
    FreeBSD(:x86_64) => ("$bin_prefix/FFMPEG.v4.1.0.x86_64-unknown-freebsd11.1.tar.gz", "170160afda904c57e92141434c5b223784f18a49ca17e6895b2057b98da322e1"),
    Windows(:x86_64) => ("$bin_prefix/FFMPEG.v4.1.0.x86_64-w64-mingw32.tar.gz", "e6a430afb624114d3772c931359c7ade15dc53195bbd8e50e19f7441f1ab434e"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
