using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libfribidi"], :libfribidi),
    ExecutableProduct(prefix, "fribidi", :fribidi),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/FriBidi_jll.jl/releases/download/FriBidi-v1.0.5+2"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/FriBidi.v1.0.5.aarch64-linux-gnu.tar.gz", "e17db133b892d14b84312b22c13c247e9daaa1db0a8bf5bbc72fd19c61756c3b"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/FriBidi.v1.0.5.aarch64-linux-musl.tar.gz", "c19d49e566e782d65f6c8b434ec66f1d78f12274ceb5a803fad7aca61e245f55"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/FriBidi.v1.0.5.arm-linux-gnueabihf.tar.gz", "6b6713643924924ec5e318041c8f33eb89e4ce7fb122f6071c135d65c64652c1"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/FriBidi.v1.0.5.arm-linux-musleabihf.tar.gz", "674eec7a8a81cd7c2a10f5def4fbdc45edc6d8aeb99e3693918855d74bc4ab1d"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/FriBidi.v1.0.5.i686-linux-gnu.tar.gz", "91d72a5e53208d5c619c88963b7150f60ae026778ecf634aaceef8fd512a4858"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/FriBidi.v1.0.5.i686-linux-musl.tar.gz", "117ad8caf135f4bdfde962fe8983472e20799019500893c2167a1a186918173d"),
    Windows(:i686) => ("$bin_prefix/FriBidi.v1.0.5.i686-w64-mingw32.tar.gz", "93d7b86ca10bb07cb280779cf80aaa1685fc5bcfed8e27d32163b71e15d7a95b"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/FriBidi.v1.0.5.powerpc64le-linux-gnu.tar.gz", "5213734f3ae160a828aec400db106aed7feb23fa4ddc32a259c2693d8a57442d"),
    MacOS(:x86_64) => ("$bin_prefix/FriBidi.v1.0.5.x86_64-apple-darwin14.tar.gz", "e8633a4ae7e7855cff23aef0d231caca57df4ef01ddc6f80e0464022d68d4fe7"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/FriBidi.v1.0.5.x86_64-linux-gnu.tar.gz", "da882e3c03bf7d33b1111cb5b3b244d39d6fdb6fd16ee52ca58b363c5bb960d4"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/FriBidi.v1.0.5.x86_64-linux-musl.tar.gz", "6fe14427e950ac9eb1f1536f7b927255f4648eaf978e9c271b4db1453776eb6c"),
    FreeBSD(:x86_64) => ("$bin_prefix/FriBidi.v1.0.5.x86_64-unknown-freebsd11.1.tar.gz", "06ac7b94255b0c9dfd3c0249c2967f0981bff5abaa8247b3051f519a3cc296c9"),
    Windows(:x86_64) => ("$bin_prefix/FriBidi.v1.0.5.x86_64-w64-mingw32.tar.gz", "37002eabdf694a0e44b4ceaa26b1d23a26338dc3787f7a869dbde56c2ea27bc7"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
