using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    ExecutableProduct(prefix, "lame", :lame),
    LibraryProduct(prefix, ["libmp3lame"], :libmp3lame),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/LAME_jll.jl/releases/download/LAME-v3.100.0+0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/LAME.v3.100.0.aarch64-linux-gnu.tar.gz", "a70bc1d22fd90b7c4aca7ac8f3fcc04489d60a15915bc7eb3c7dfb48f853b113"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/LAME.v3.100.0.aarch64-linux-musl.tar.gz", "d06581922873021d6e3db5d2abf7c6377e68992f62be23045a6aa9071ff42f67"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/LAME.v3.100.0.arm-linux-gnueabihf.tar.gz", "8ca707997fab3e597a5b449d014a132488bdfdc1634295dcb2e92d2190cfbe6c"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/LAME.v3.100.0.arm-linux-musleabihf.tar.gz", "2156d705b722f5c6ea4b5911cd2131a6d51a2019240fa9bdb41311f58ebe3dc1"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/LAME.v3.100.0.i686-linux-gnu.tar.gz", "fbfae66ebdcd23eb1da437c3cbf5fba1f3f05d15af4610a221e80763160ca89d"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/LAME.v3.100.0.i686-linux-musl.tar.gz", "a29583b68bc1c91386cfa84428916c842d89dddbf0f58be048fc2db5658fb31d"),
    Windows(:i686) => ("$bin_prefix/LAME.v3.100.0.i686-w64-mingw32.tar.gz", "e73c4f9af4e050958dbe01d825725560188fc321b174278dfd826bfac7b35d31"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/LAME.v3.100.0.powerpc64le-linux-gnu.tar.gz", "5f795fc2c93ed554e80f0e0a2cc5b5c472290a12b8df17fef0eb4378099935dd"),
    MacOS(:x86_64) => ("$bin_prefix/LAME.v3.100.0.x86_64-apple-darwin14.tar.gz", "71ec7e279b3f75ca334df3241791608c17c5ad83796f2d773449c6b55a862878"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/LAME.v3.100.0.x86_64-linux-gnu.tar.gz", "62b30787671906cd04499ed46933814528cf96174a32521bc0d0d48528e4fec1"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/LAME.v3.100.0.x86_64-linux-musl.tar.gz", "9f4559142cd370ad0a1b84b12e78c305abbbef487f908b249ddbf85f82b7bd1e"),
    FreeBSD(:x86_64) => ("$bin_prefix/LAME.v3.100.0.x86_64-unknown-freebsd11.1.tar.gz", "332f7213dcb9434a7e7ed49941957520fc2ad23e7993e5eacdecbdf88515700d"),
    Windows(:x86_64) => ("$bin_prefix/LAME.v3.100.0.x86_64-w64-mingw32.tar.gz", "7c8058e87a5e2bfda5cd0100d16da4dc58785464a6b2989e2dad30eda13cf349"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
