using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = Product[
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/LibVPX_jll.jl/releases/download/LibVPX-v1.8.1+1"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/LibVPX.v1.8.1.aarch64-linux-gnu.tar.gz", "185c0c5bcd2af594aeb7d6b03a74f80b54cecdac36e25fc0a8445c50431b797d"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/LibVPX.v1.8.1.aarch64-linux-musl.tar.gz", "60e5b268e071574358c1988ad4fe998f0c6a0b9e2f25c39e021fb91d05b10f55"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/LibVPX.v1.8.1.arm-linux-gnueabihf.tar.gz", "1b943017bf8c31b6283eaa2cf307df813a6131bae557acc510f1fde35f010b46"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/LibVPX.v1.8.1.arm-linux-musleabihf.tar.gz", "cf64adc24a22df16ebf02ff847ee2421991b20602053179063ddd0385985c640"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/LibVPX.v1.8.1.i686-linux-gnu.tar.gz", "45d3f1c52076d46308a634fd5d60892276a0c007791179cb327bb54b08c6b146"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/LibVPX.v1.8.1.i686-linux-musl.tar.gz", "dca0cd5e9500556739d48755a9801771fec7209bbdd51fc5f8610558f16fb0ce"),
    Windows(:i686) => ("$bin_prefix/LibVPX.v1.8.1.i686-w64-mingw32.tar.gz", "b8cb11a4fe71940316c93aead9f56bc0416ece3bbbde5af4f36939c8b15dd39d"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/LibVPX.v1.8.1.powerpc64le-linux-gnu.tar.gz", "823f7b9262bf1489eb0aa40bf1589295547a14d401729f5bdaa16c3241b92e4e"),
    MacOS(:x86_64) => ("$bin_prefix/LibVPX.v1.8.1.x86_64-apple-darwin14.tar.gz", "f1f8fd6234db57c884d9cf70aa591039ca90ed11e218483c6359a50141405307"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/LibVPX.v1.8.1.x86_64-linux-gnu.tar.gz", "6c181a771bd7f8b16457858857ca24d5888de169803bc7e85310139360c6ee8b"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/LibVPX.v1.8.1.x86_64-linux-musl.tar.gz", "4ab5ffa8a863209fb353561eb9260d16f7371ab45aff8832deb526b580367759"),
    FreeBSD(:x86_64) => ("$bin_prefix/LibVPX.v1.8.1.x86_64-unknown-freebsd11.1.tar.gz", "ed49fceed75ca1ab55ea80f131cb8144b5eb4807fa02358539be42edf0931dc9"),
    Windows(:x86_64) => ("$bin_prefix/LibVPX.v1.8.1.x86_64-w64-mingw32.tar.gz", "d0b7320d533262cdfaa03841e5a39292de0a49a1db0cc69447a339364c535aa9"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
