using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libass"], :libass),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/libass_jll.jl/releases/download/libass-v0.14.0+0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/libass.v0.14.0.aarch64-linux-gnu.tar.gz", "da3ff77d1f6ed96a4be5fd3b7a2329a8c5262d22bccb14c3676a032633dde2d0"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/libass.v0.14.0.aarch64-linux-musl.tar.gz", "69bf7ea41e658e1b4098c40309c12c608fd43e006949b6c333c13dbaa8d3a13b"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/libass.v0.14.0.arm-linux-gnueabihf.tar.gz", "6df9b11b199c7e49ce2a451c713b6f5b780c9aab9206ea3969c211f3dff6f3bf"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/libass.v0.14.0.arm-linux-musleabihf.tar.gz", "f1bc8beac57a5e4cecb38190e1d0eb6eb43e57becf6299a8a6ee80cd0cb08243"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/libass.v0.14.0.i686-linux-gnu.tar.gz", "68bf305a60492b7ff999383244821526e6c80f50583cc479fcfd305d5856faaa"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/libass.v0.14.0.i686-linux-musl.tar.gz", "d8a76537a4ba240ebdb059a91c9a56145ec3e645efa70fb17e41c2fa7665875a"),
    Windows(:i686) => ("$bin_prefix/libass.v0.14.0.i686-w64-mingw32.tar.gz", "0851effac3b1955c6b410b59324254a4d7ae000062cd85ed80f6a8ae1b753221"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/libass.v0.14.0.powerpc64le-linux-gnu.tar.gz", "c9a49521fca7690dec4d7e8d60ca56c64e64d1a032ec6d51d5d701659982c2cc"),
    MacOS(:x86_64) => ("$bin_prefix/libass.v0.14.0.x86_64-apple-darwin14.tar.gz", "b89fc73663dcbca1192faa8f9d1fdd0bf0df610896664cb33f0738adaed56155"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/libass.v0.14.0.x86_64-linux-gnu.tar.gz", "d0e7d7c391855d7092694c9e1c752e92bdba93f3433fbba8d9d87d3af058956f"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/libass.v0.14.0.x86_64-linux-musl.tar.gz", "657fe7e5d1b058a5791aa2786950d9fd67703d793bc1990327769da005fb2027"),
    FreeBSD(:x86_64) => ("$bin_prefix/libass.v0.14.0.x86_64-unknown-freebsd11.1.tar.gz", "1b28b84244100ed233b359efd9c17ff044bc0320f8bc057deca4c8a0a4a79181"),
    Windows(:x86_64) => ("$bin_prefix/libass.v0.14.0.x86_64-w64-mingw32.tar.gz", "68a90d8c270622786af62ce0debde96db86c5af192eb15e5ebf8e03adff535bf"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
