using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libmp3lame"], :libmp3lame),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaIO/LAMEBuilder/releases/download/v3.100.0-2"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/liblame.v3.100.0.aarch64-linux-gnu.tar.gz", "c6f390e6e6760efff5755a61c3afd9725f93c6e319ed3ba4f7bed97c94975d03"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/liblame.v3.100.0.aarch64-linux-musl.tar.gz", "a7b7d826c439063037ed6f96b3a0df794c3cb9f2326959fc75407a7a8ff860ad"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/liblame.v3.100.0.arm-linux-gnueabihf.tar.gz", "46085806eff56317f0c229f02dc862adfe23d0149748755988c8cb1efabb35a4"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/liblame.v3.100.0.arm-linux-musleabihf.tar.gz", "77e33f280e5bd994af63ce43c3a3c85db4785b1043228cd6820e0ba625a77826"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/liblame.v3.100.0.i686-linux-gnu.tar.gz", "62cecfb62c582b1deefcc1f0873c738991c8fe284c40d3f9ccee38c7209c3266"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/liblame.v3.100.0.i686-linux-musl.tar.gz", "31840e19fa02f544812b246d2f297e0eddf68dd8f73f0f4ebee1167bb7539daf"),
    Windows(:i686) => ("$bin_prefix/liblame.v3.100.0.i686-w64-mingw32.tar.gz", "987cb91a784f307cd061c6d803eb7db719103112241f5690fdf5bc779d3d3b95"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/liblame.v3.100.0.powerpc64le-linux-gnu.tar.gz", "049bb027e701ac639f9349d8a6d606f4c2a65f5527577b93eed3886e4c766658"),
    MacOS(:x86_64) => ("$bin_prefix/liblame.v3.100.0.x86_64-apple-darwin14.tar.gz", "aef67d06c941fd9b0dd637c28c9b81e7299d863c9faf376ec1a76761ecf989f1"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/liblame.v3.100.0.x86_64-linux-gnu.tar.gz", "d134af3f59c1f1b4f5a98f06b54b8c3a1d395c1942743fc4d16e3673d6604aa0"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/liblame.v3.100.0.x86_64-linux-musl.tar.gz", "12baf151e5cd38735ceabbeb5f7f6d4a2f28e76935bd5af64e2e8bca1643f596"),
    FreeBSD(:x86_64) => ("$bin_prefix/liblame.v3.100.0.x86_64-unknown-freebsd11.1.tar.gz", "07c13abd740a170ff1763045818221ce10a7fc558fe2536b1e509aee0a1b2388"),
    Windows(:x86_64) => ("$bin_prefix/liblame.v3.100.0.x86_64-w64-mingw32.tar.gz", "49b5d1a457da57f3c25a781ddeec8eeca671122614b15c0e27082ba9c769d157"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
