using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    ExecutableProduct(prefix, "x264", :x264),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaIO/x264Builder/releases/download/v2019.5.25-static"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/x264Builder.v2019.5.25.aarch64-linux-gnu.tar.gz", "f37cc06fe20ee3b1bf7e75f6e01611193067fcf75259a51dfc2f2a509a59023b"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/x264Builder.v2019.5.25.aarch64-linux-musl.tar.gz", "2fda23a89fb2f01b2d792d42a8c3645578ca9857fcbfdde20438e96ae46b47a4"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/x264Builder.v2019.5.25.arm-linux-gnueabihf.tar.gz", "3c07f262f86b8d944c2c302659615d69f6518bed6697f940e2fcd31bd7789fe4"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/x264Builder.v2019.5.25.arm-linux-musleabihf.tar.gz", "7567d593a862c7643a1960c3e7ef41a07d990c0b5bcb43a0f9a0e5e7e1160234"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/x264Builder.v2019.5.25.i686-linux-gnu.tar.gz", "8ac47099c2c11c929e536ca211d08caafe52a9bed11022e32740518bf684303a"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/x264Builder.v2019.5.25.i686-linux-musl.tar.gz", "0fce7dc1ace60cb046079fef5eb65597044ffe977102877f47acad63ce1ac61b"),
    Windows(:i686) => ("$bin_prefix/x264Builder.v2019.5.25.i686-w64-mingw32.tar.gz", "076739e9fc66a698d51fdc457c85a94915caba937a17397ed7df6f048cbca379"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/x264Builder.v2019.5.25.powerpc64le-linux-gnu.tar.gz", "719aa2f7ddd7bfb3d50f138024ce503fc1c2ab87d97cd5ab6a66bc4a17a89dc8"),
    MacOS(:x86_64) => ("$bin_prefix/x264Builder.v2019.5.25.x86_64-apple-darwin14.tar.gz", "90675efc01e0104cf609b9c6c311f5d11dbc28008b6e091581bf322cfa7d4448"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/x264Builder.v2019.5.25.x86_64-linux-gnu.tar.gz", "506f44ae584e1832c839a2387f11b14f25bf4fc098fe3b27d74e412dcbe959c1"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/x264Builder.v2019.5.25.x86_64-linux-musl.tar.gz", "161e4cc0361b8a59e5c71363c4bc477f37daaed76eb2af7327b456a7b6ad0c7f"),
    FreeBSD(:x86_64) => ("$bin_prefix/x264Builder.v2019.5.25.x86_64-unknown-freebsd11.1.tar.gz", "1fa2401ec37eb5c3f76cc93fe4bf677e2a20c9fb4f8136a8dcd954bd043b09a9"),
    Windows(:x86_64) => ("$bin_prefix/x264Builder.v2019.5.25.x86_64-w64-mingw32.tar.gz", "13e52dbfb5f523e00da6f1bc00a54e73bec6ec41dd4cad4ae2db583dbd67d088"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
