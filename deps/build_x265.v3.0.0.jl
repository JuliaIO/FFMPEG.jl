using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    ExecutableProduct(prefix, "x265", :x265),
    LibraryProduct(prefix, ["libx265"], :libx265),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/x265_jll.jl/releases/download/x265-v3.0.0+0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/x265.v3.0.0.aarch64-linux-gnu.tar.gz", "cb7296d8fc688c879097b0967d9803d8f73877a5435c90c9385f035e627f1d5d"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/x265.v3.0.0.aarch64-linux-musl.tar.gz", "014b5301b73f006eb057227d4e8120b65a1cc2851653785276b592ccfb0e785b"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/x265.v3.0.0.arm-linux-gnueabihf.tar.gz", "a50813ac5867bec298bbcaed1653b4c5fda7bd8f8d3571458a34246b3856d310"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/x265.v3.0.0.arm-linux-musleabihf.tar.gz", "59be19b9de6503eeb839238ad7edc6e136739bc0b1d1368bbd654336b71f40a1"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/x265.v3.0.0.i686-linux-gnu.tar.gz", "dd2035dd74d9043c8679794c68de097e8751e4eff4582a822dabfbb541784c90"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/x265.v3.0.0.i686-linux-musl.tar.gz", "8b96c9b16766ac1fe8825163bd8e3e0d94b9e6241cebca44367639e5dfc57d62"),
    Windows(:i686) => ("$bin_prefix/x265.v3.0.0.i686-w64-mingw32.tar.gz", "5b21834a3f27278226e368ce9207fbc84e62de4350908b3e74d5b6ca0f94974c"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/x265.v3.0.0.powerpc64le-linux-gnu.tar.gz", "adec1786a36725bbee6fa509f5362a72416296f3bccd8edaab84cef94a7852da"),
    MacOS(:x86_64) => ("$bin_prefix/x265.v3.0.0.x86_64-apple-darwin14.tar.gz", "f7e823533626cdd86f1e248c1891ec46cb68f57ec598f0b639a7d9456d78bbc5"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/x265.v3.0.0.x86_64-linux-gnu.tar.gz", "a11034f66239bddb1f4491ecfb313c01310dd7e006fdf48543b4ffc8b41274a8"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/x265.v3.0.0.x86_64-linux-musl.tar.gz", "4b8129ebedc43c9a9c662081b9fa8e67f9e79b7d636822c1ba63e58d6c202271"),
    FreeBSD(:x86_64) => ("$bin_prefix/x265.v3.0.0.x86_64-unknown-freebsd11.1.tar.gz", "f510ee1d9ea7b692c2f59cc51b61a715e27a772559772639cd1e1e93b8772c02"),
    Windows(:x86_64) => ("$bin_prefix/x265.v3.0.0.x86_64-w64-mingw32.tar.gz", "6946ef4fab2c29617c1b3a9a3ea52c17ac8bcbfb17391cc5b2ba988d41feb5b5"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
