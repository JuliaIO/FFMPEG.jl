using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    ExecutableProduct(prefix, "x265", :x265),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaIO/x265Builder/releases/download/v3.0.0-static"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/x265Builder.v3.0.0.aarch64-linux-gnu.tar.gz", "ffc427fd3ee3a20b0fe1f70624d39ce35e88723836041a1b2fb58ebe8fe2bf8f"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/x265Builder.v3.0.0.aarch64-linux-musl.tar.gz", "600e90ef4517addd1d600735a86d79326271b5036c7cb5b8eb93aea124c37a87"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/x265Builder.v3.0.0.arm-linux-gnueabihf.tar.gz", "788445a04b74041fd353425bf7d4ddcd10b408075bde7c5caa697820207b8d2b"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/x265Builder.v3.0.0.arm-linux-musleabihf.tar.gz", "bfa41c53e670271c83503e43c7355a10df3d4a344f51e4f4cf1d001f677a186e"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/x265Builder.v3.0.0.i686-linux-gnu.tar.gz", "3a565118b55999410d96140e140a9a3a6501b18ae1d1eb5d7bc859e955c0655e"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/x265Builder.v3.0.0.i686-linux-musl.tar.gz", "e08fb38f578818a934c39062b5d8d261c4468a9af1913bae4ff6634a826656e1"),
    Windows(:i686) => ("$bin_prefix/x265Builder.v3.0.0.i686-w64-mingw32.tar.gz", "356272dc5ae6cfee0a6d506b22619ad6f4e48f56af4f02c61d4ee64b816a9eea"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/x265Builder.v3.0.0.powerpc64le-linux-gnu.tar.gz", "ec8662ea2824c0924918da409303c17b8f5090a01f152f992ada51173d0e2a57"),
    MacOS(:x86_64) => ("$bin_prefix/x265Builder.v3.0.0.x86_64-apple-darwin14.tar.gz", "92dd2653618f2432b7344f56513a96da6bb656edd08e26e20f0632619ee91a6b"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/x265Builder.v3.0.0.x86_64-linux-gnu.tar.gz", "542e6321312f424c6d94c81f998a67e16df4f8fd14df030b3dc7a1785041bb1d"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/x265Builder.v3.0.0.x86_64-linux-musl.tar.gz", "e225fd32c5f1b8c49b5adb5b99f8fc4d9fb2ac5df0864a24f7de35235ec0cf75"),
    FreeBSD(:x86_64) => ("$bin_prefix/x265Builder.v3.0.0.x86_64-unknown-freebsd11.1.tar.gz", "06897fd4c4501eca60c1aa8bc8f4aa41c2e970785a6a31d4d6becb9fc6e8c8b3"),
    Windows(:x86_64) => ("$bin_prefix/x265Builder.v3.0.0.x86_64-w64-mingw32.tar.gz", "710adc334738c7d0e9de9c0265c71b781d6e3eb7f9c8a6916d66e781f8927534"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
